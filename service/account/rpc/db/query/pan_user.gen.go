// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"ipfsdisk/service/account/rpc/db/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newPanUser(db *gorm.DB) panUser {
	_panUser := panUser{}

	_panUser.panUserDo.UseDB(db)
	_panUser.panUserDo.UseModel(&model.PanUser{})

	tableName := _panUser.panUserDo.TableName()
	_panUser.ALL = field.NewField(tableName, "*")
	_panUser.ID = field.NewInt64(tableName, "id")
	_panUser.Email = field.NewString(tableName, "email")
	_panUser.Username = field.NewString(tableName, "username")
	_panUser.Password = field.NewString(tableName, "password")
	_panUser.Status = field.NewInt32(tableName, "status")
	_panUser.Roles = field.NewString(tableName, "roles")
	_panUser.Ticket = field.NewString(tableName, "ticket")
	_panUser.LastActive = field.NewTime(tableName, "last_active")
	_panUser.Created = field.NewTime(tableName, "created")
	_panUser.Updated = field.NewTime(tableName, "updated")
	_panUser.Deleted = field.NewTime(tableName, "deleted")

	_panUser.fillFieldMap()

	return _panUser
}

type panUser struct {
	panUserDo panUserDo

	ALL        field.Field
	ID         field.Int64
	Email      field.String
	Username   field.String
	Password   field.String
	Status     field.Int32
	Roles      field.String
	Ticket     field.String
	LastActive field.Time
	Created    field.Time
	Updated    field.Time
	Deleted    field.Time

	fieldMap map[string]field.Expr
}

func (p panUser) As(alias string) *panUser {
	p.panUserDo.DO = *(p.panUserDo.As(alias).(*gen.DO))

	p.ALL = field.NewField(alias, "*")
	p.ID = field.NewInt64(alias, "id")
	p.Email = field.NewString(alias, "email")
	p.Username = field.NewString(alias, "username")
	p.Password = field.NewString(alias, "password")
	p.Status = field.NewInt32(alias, "status")
	p.Roles = field.NewString(alias, "roles")
	p.Ticket = field.NewString(alias, "ticket")
	p.LastActive = field.NewTime(alias, "last_active")
	p.Created = field.NewTime(alias, "created")
	p.Updated = field.NewTime(alias, "updated")
	p.Deleted = field.NewTime(alias, "deleted")

	p.fillFieldMap()

	return &p
}

func (p *panUser) WithContext(ctx context.Context) *panUserDo { return p.panUserDo.WithContext(ctx) }

func (p panUser) TableName() string { return p.panUserDo.TableName() }

func (p *panUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *panUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["email"] = p.Email
	p.fieldMap["username"] = p.Username
	p.fieldMap["password"] = p.Password
	p.fieldMap["status"] = p.Status
	p.fieldMap["roles"] = p.Roles
	p.fieldMap["ticket"] = p.Ticket
	p.fieldMap["last_active"] = p.LastActive
	p.fieldMap["created"] = p.Created
	p.fieldMap["updated"] = p.Updated
	p.fieldMap["deleted"] = p.Deleted
}

func (p panUser) clone(db *gorm.DB) panUser {
	p.panUserDo.ReplaceDB(db)
	return p
}

type panUserDo struct{ gen.DO }

func (p panUserDo) Debug() *panUserDo {
	return p.withDO(p.DO.Debug())
}

func (p panUserDo) WithContext(ctx context.Context) *panUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p panUserDo) Clauses(conds ...clause.Expression) *panUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p panUserDo) Not(conds ...gen.Condition) *panUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p panUserDo) Or(conds ...gen.Condition) *panUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p panUserDo) Select(conds ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p panUserDo) Where(conds ...gen.Condition) *panUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p panUserDo) Order(conds ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p panUserDo) Distinct(cols ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p panUserDo) Omit(cols ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p panUserDo) Join(table schema.Tabler, on ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p panUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *panUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p panUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *panUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p panUserDo) Group(cols ...field.Expr) *panUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p panUserDo) Having(conds ...gen.Condition) *panUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p panUserDo) Limit(limit int) *panUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p panUserDo) Offset(offset int) *panUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p panUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *panUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p panUserDo) Unscoped() *panUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p panUserDo) Create(values ...*model.PanUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p panUserDo) CreateInBatches(values []*model.PanUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p panUserDo) Save(values ...*model.PanUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p panUserDo) First() (*model.PanUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PanUser), nil
	}
}

func (p panUserDo) Take() (*model.PanUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PanUser), nil
	}
}

func (p panUserDo) Last() (*model.PanUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PanUser), nil
	}
}

func (p panUserDo) Find() ([]*model.PanUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.PanUser), err
}

func (p panUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PanUser, err error) {
	buf := make([]*model.PanUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p panUserDo) FindInBatches(result *[]*model.PanUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p panUserDo) Attrs(attrs ...field.AssignExpr) *panUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p panUserDo) Assign(attrs ...field.AssignExpr) *panUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p panUserDo) Joins(field field.RelationField) *panUserDo {
	return p.withDO(p.DO.Joins(field))
}

func (p panUserDo) Preload(field field.RelationField) *panUserDo {
	return p.withDO(p.DO.Preload(field))
}

func (p panUserDo) FirstOrInit() (*model.PanUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PanUser), nil
	}
}

func (p panUserDo) FirstOrCreate() (*model.PanUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PanUser), nil
	}
}

func (p panUserDo) FindByPage(offset int, limit int) (result []*model.PanUser, count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = p.Offset(offset).Limit(limit).Find()
	return
}

func (p panUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *panUserDo) withDO(do gen.Dao) *panUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
